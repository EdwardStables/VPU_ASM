#pragma once
{{ warning }}

#include <cstdint>
#include <string>

{% if namespace != "" %}
namespace {{namespace}} {
{% endif %}

//Dirty global state
inline uint32_t _global_cycle = 0;
void increment_global_cycle();
uint32_t get_global_cycle();
uint32_t get_next_global_cycle();


//Configuration
const uint32_t REGISTER_COUNT = {{registers|length}};
const uint32_t FLAG_COUNT = {{flags|length}};
const uint32_t SEGMENT_END = 0xFFFFFFFF;
const uint32_t MAX_OPCODE_LEN = {{max_opcode_len}};
const std::string SEGMENT_END_WIDTH_STRING = "{{ 'SEG_END'.rjust(max_opcode_len) }}";
constexpr uint32_t MEM_SIZE = {{mem_size_mb}} * 1024 * 1024;
const uint32_t MEM_ACCESS_WIDTH = {{mem_access_width_bytes}}; //Used by DMA and mem heirarchy

//Framebuffer
constexpr uint32_t FRAMEBUFFER_WIDTH = 300;
constexpr uint32_t FRAMEBUFFER_HEIGHT = 200;
constexpr uint8_t FRAMEBUFFER_PIXEL_BYTES = 4; //RGBA
constexpr uint32_t FRAMEBUFFER_PIXEL_BITS = 8 * FRAMEBUFFER_PIXEL_BYTES; //RGBA 8bit
constexpr uint32_t BLITTER_MAX_PIXELS = (MEM_ACCESS_WIDTH*8)/FRAMEBUFFER_PIXEL_BITS; //How many pixels blitter can set per cycle
constexpr bool DOUBLEBUFFERED = false;
constexpr uint32_t FRAMEBUFFER_BYTES = (DOUBLEBUFFERED ? 2 : 1) * FRAMEBUFFER_PIXEL_BYTES * FRAMEBUFFER_HEIGHT * FRAMEBUFFER_WIDTH;
constexpr uint32_t FRAMEBUFFER_ADDR = (MEM_SIZE - FRAMEBUFFER_BYTES) & 0xFFFF0000;
static_assert(FRAMEBUFFER_BYTES < MEM_SIZE / 4, "Framebuffer size would take up more than 1/4 of available memory");

//Branch Prediction
const uint32_t BHT_SIZE = 16;
const uint32_t BHT_SIZE_LOG2 = 4;
const uint32_t BTB_SIZE = 4;
const uint32_t BTB_SIZE_LOG2 = 2;

uint32_t get_bht_tag(uint32_t addr);
uint32_t get_btb_tag(uint32_t addr);


//Enum definitions
enum Register { {% for r in registers %}
    {{r}} = {{loop.index0}},{% endfor %}
};

enum Flag { {% for f in flags %}
    {{f}} = {{loop.index0}},{% endfor %}
};

enum Opcode { {% for i in instructions %}
    {{i.internal_name}} = {{i.encoding}},{% endfor %}
};

Opcode get_opcode(uint32_t instr);
std::string opcode_to_string(Opcode opcode);
std::string opcode_to_string_fixed(Opcode opcode);
std::string flag_to_string(Flag flag);
std::string register_to_string(Register reg);
uint32_t get_label(uint32_t instr);
uint32_t get_u24(uint32_t instr);
uint16_t get_u16(uint32_t instr);
Register get_register(uint32_t instr, uint8_t index);

//Pipelines
const uint32_t SCHEDULER_FRONTEND_QUEUE_SIZE = 4;
enum Pipe { {% for p in pipes %}
    {{p.name|upper}} = {{p.encoding_prefix}},{% endfor %}
};
Pipe opcode_to_pipe(Opcode opcode);

{% if namespace != "" %}
}
{% endif %}
