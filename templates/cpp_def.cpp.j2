#include "{{header}}.h"
#include <assert.h>
{{ warning }}

{% if namespace != "" %}
namespace {{namespace}} {
{% endif %} 

Opcode get_opcode(uint32_t instr) {
    return (Opcode)(instr >> 24);
}

std::string register_to_string(Register reg) {
    switch(reg) { {% for r in registers %}
        case {{loop.index0}}: return "{{r}}";{% endfor %}
        default: assert(false);
    }
}

std::string flag_to_string(Flag flag) {
    switch(flag) { {% for f in flags %}
        case {{loop.index0}}: return "{{f}}";{% endfor %}
        default: assert(false);
    }
}

std::string opcode_to_string(Opcode opcode) {
    switch(opcode) { {% for i in instructions %}
        case {{i.internal_name}}: return "{{i.internal_name}}";{% endfor %}
        default: assert(false);
    }
}

uint32_t get_label(uint32_t instr) {
    return 0xFFFFFF & instr;
}

uint32_t get_u24(uint32_t instr) {
    return 0xFFFFFF & instr;
}

uint16_t get_u16(uint32_t instr) {
    return 0xFFFF & instr;
}

//Index from left to right
Register get_register(uint32_t instr, uint8_t index) {
    assert((0 <= index) && (index < 3));
    return (Register)(0xFF & (instr >> 8*(2-index)));
}

{% if namespace != "" %}
}
{% endif %}
